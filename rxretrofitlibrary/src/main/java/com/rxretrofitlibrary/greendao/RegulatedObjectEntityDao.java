package com.rxretrofitlibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wzgiceman.rxretrofitlibrary.retrofit_rx.entity.RegulatedObjectEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGULATED_OBJECT_ENTITY".
*/
public class RegulatedObjectEntityDao extends AbstractDao<RegulatedObjectEntity, Long> {

    public static final String TABLENAME = "REGULATED_OBJECT_ENTITY";

    /**
     * Properties of entity RegulatedObjectEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Nature = new Property(2, String.class, "nature", false, "NATURE");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property UnifiedCode = new Property(4, String.class, "unifiedCode", false, "UNIFIED_CODE");
        public final static Property BelongedTrade = new Property(5, String.class, "belongedTrade", false, "BELONGED_TRADE");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Longitude = new Property(7, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(8, double.class, "latitude", false, "LATITUDE");
        public final static Property ContactPhone = new Property(9, String.class, "contactPhone", false, "CONTACT_PHONE");
        public final static Property Inspcount = new Property(10, String.class, "inspcount", false, "INSPCOUNT");
        public final static Property Entcredit = new Property(11, String.class, "entcredit", false, "ENTCREDIT");
        public final static Property Passrate = new Property(12, String.class, "passrate", false, "PASSRATE");
        public final static Property Entregion = new Property(13, String.class, "entregion", false, "ENTREGION");
        public final static Property Status = new Property(14, int.class, "status", false, "STATUS");
    }


    public RegulatedObjectEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RegulatedObjectEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGULATED_OBJECT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NATURE\" TEXT," + // 2: nature
                "\"CODE\" TEXT," + // 3: code
                "\"UNIFIED_CODE\" TEXT," + // 4: unifiedCode
                "\"BELONGED_TRADE\" TEXT," + // 5: belongedTrade
                "\"ADDRESS\" TEXT," + // 6: address
                "\"LONGITUDE\" REAL NOT NULL ," + // 7: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 8: latitude
                "\"CONTACT_PHONE\" TEXT," + // 9: contactPhone
                "\"INSPCOUNT\" TEXT," + // 10: inspcount
                "\"ENTCREDIT\" TEXT," + // 11: entcredit
                "\"PASSRATE\" TEXT," + // 12: passrate
                "\"ENTREGION\" TEXT," + // 13: entregion
                "\"STATUS\" INTEGER NOT NULL );"); // 14: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGULATED_OBJECT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegulatedObjectEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nature = entity.getNature();
        if (nature != null) {
            stmt.bindString(3, nature);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String unifiedCode = entity.getUnifiedCode();
        if (unifiedCode != null) {
            stmt.bindString(5, unifiedCode);
        }
 
        String belongedTrade = entity.getBelongedTrade();
        if (belongedTrade != null) {
            stmt.bindString(6, belongedTrade);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindDouble(8, entity.getLongitude());
        stmt.bindDouble(9, entity.getLatitude());
 
        String contactPhone = entity.getContactPhone();
        if (contactPhone != null) {
            stmt.bindString(10, contactPhone);
        }
 
        String inspcount = entity.getInspcount();
        if (inspcount != null) {
            stmt.bindString(11, inspcount);
        }
 
        String entcredit = entity.getEntcredit();
        if (entcredit != null) {
            stmt.bindString(12, entcredit);
        }
 
        String passrate = entity.getPassrate();
        if (passrate != null) {
            stmt.bindString(13, passrate);
        }
 
        String entregion = entity.getEntregion();
        if (entregion != null) {
            stmt.bindString(14, entregion);
        }
        stmt.bindLong(15, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegulatedObjectEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nature = entity.getNature();
        if (nature != null) {
            stmt.bindString(3, nature);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String unifiedCode = entity.getUnifiedCode();
        if (unifiedCode != null) {
            stmt.bindString(5, unifiedCode);
        }
 
        String belongedTrade = entity.getBelongedTrade();
        if (belongedTrade != null) {
            stmt.bindString(6, belongedTrade);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindDouble(8, entity.getLongitude());
        stmt.bindDouble(9, entity.getLatitude());
 
        String contactPhone = entity.getContactPhone();
        if (contactPhone != null) {
            stmt.bindString(10, contactPhone);
        }
 
        String inspcount = entity.getInspcount();
        if (inspcount != null) {
            stmt.bindString(11, inspcount);
        }
 
        String entcredit = entity.getEntcredit();
        if (entcredit != null) {
            stmt.bindString(12, entcredit);
        }
 
        String passrate = entity.getPassrate();
        if (passrate != null) {
            stmt.bindString(13, passrate);
        }
 
        String entregion = entity.getEntregion();
        if (entregion != null) {
            stmt.bindString(14, entregion);
        }
        stmt.bindLong(15, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public RegulatedObjectEntity readEntity(Cursor cursor, int offset) {
        RegulatedObjectEntity entity = new RegulatedObjectEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nature
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unifiedCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // belongedTrade
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.getDouble(offset + 7), // longitude
            cursor.getDouble(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // contactPhone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // inspcount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // entcredit
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // passrate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // entregion
            cursor.getInt(offset + 14) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegulatedObjectEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNature(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnifiedCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBelongedTrade(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLongitude(cursor.getDouble(offset + 7));
        entity.setLatitude(cursor.getDouble(offset + 8));
        entity.setContactPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInspcount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEntcredit(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPassrate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEntregion(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStatus(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RegulatedObjectEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RegulatedObjectEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RegulatedObjectEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
