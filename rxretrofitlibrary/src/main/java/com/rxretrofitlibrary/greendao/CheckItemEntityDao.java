package com.rxretrofitlibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wzgiceman.rxretrofitlibrary.retrofit_rx.entity.CheckItemEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_ITEM_ENTITY".
*/
public class CheckItemEntityDao extends AbstractDao<CheckItemEntity, Long> {

    public static final String TABLENAME = "CHECK_ITEM_ENTITY";

    /**
     * Properties of entity CheckItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ItemId = new Property(0, Long.class, "itemId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Method = new Property(3, String.class, "method", false, "METHOD");
        public final static Property Iskey = new Property(4, String.class, "iskey", false, "ISKEY");
        public final static Property Tableid = new Property(5, String.class, "tableid", false, "TABLEID");
    }


    public CheckItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CheckItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_ITEM_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: itemId
                "\"ID\" TEXT," + // 1: id
                "\"CONTENT\" TEXT," + // 2: content
                "\"METHOD\" TEXT," + // 3: method
                "\"ISKEY\" TEXT," + // 4: iskey
                "\"TABLEID\" TEXT);"); // 5: tableid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_ITEM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckItemEntity entity) {
        stmt.clearBindings();
 
        Long itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindLong(1, itemId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(4, method);
        }
 
        String iskey = entity.getIskey();
        if (iskey != null) {
            stmt.bindString(5, iskey);
        }
 
        String tableid = entity.getTableid();
        if (tableid != null) {
            stmt.bindString(6, tableid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckItemEntity entity) {
        stmt.clearBindings();
 
        Long itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindLong(1, itemId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(4, method);
        }
 
        String iskey = entity.getIskey();
        if (iskey != null) {
            stmt.bindString(5, iskey);
        }
 
        String tableid = entity.getTableid();
        if (tableid != null) {
            stmt.bindString(6, tableid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckItemEntity readEntity(Cursor cursor, int offset) {
        CheckItemEntity entity = new CheckItemEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // itemId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // method
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // iskey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // tableid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckItemEntity entity, int offset) {
        entity.setItemId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMethod(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIskey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTableid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckItemEntity entity, long rowId) {
        entity.setItemId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckItemEntity entity) {
        if(entity != null) {
            return entity.getItemId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckItemEntity entity) {
        return entity.getItemId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
