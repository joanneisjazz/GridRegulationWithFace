package com.rxretrofitlibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wzgiceman.rxretrofitlibrary.retrofit_rx.entity.RegulateResultBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGULATE_RESULT_BEAN".
*/
public class RegulateResultBeanDao extends AbstractDao<RegulateResultBean, Long> {

    public static final String TABLENAME = "REGULATE_RESULT_BEAN";

    /**
     * Properties of entity RegulateResultBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BeanId = new Property(0, Long.class, "beanId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Itemid = new Property(2, String.class, "itemid", false, "ITEMID");
        public final static Property Itemcontent = new Property(3, String.class, "itemcontent", false, "ITEMCONTENT");
        public final static Property Inspresult = new Property(4, String.class, "inspresult", false, "INSPRESULT");
        public final static Property Inspdesc = new Property(5, String.class, "inspdesc", false, "INSPDESC");
        public final static Property Inspid = new Property(6, String.class, "inspid", false, "INSPID");
        public final static Property Insptable = new Property(7, String.class, "insptable", false, "INSPTABLE");
        public final static Property Oisuper = new Property(8, String.class, "oisuper", false, "OISUPER");
        public final static Property Insploc = new Property(9, String.class, "insploc", false, "INSPLOC");
        public final static Property CreateBy = new Property(10, String.class, "createBy", false, "CREATE_BY");
        public final static Property UpdateBy = new Property(11, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property Inspstatus = new Property(12, String.class, "inspstatus", false, "INSPSTATUS");
        public final static Property Image = new Property(13, String.class, "image", false, "IMAGE");
        public final static Property LoacalPath = new Property(14, String.class, "loacalPath", false, "LOACAL_PATH");
        public final static Property Status = new Property(15, String.class, "status", false, "STATUS");
        public final static Property Inspstart = new Property(16, String.class, "inspstart", false, "INSPSTART");
    }


    public RegulateResultBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RegulateResultBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGULATE_RESULT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: beanId
                "\"ID\" TEXT," + // 1: id
                "\"ITEMID\" TEXT," + // 2: itemid
                "\"ITEMCONTENT\" TEXT," + // 3: itemcontent
                "\"INSPRESULT\" TEXT," + // 4: inspresult
                "\"INSPDESC\" TEXT," + // 5: inspdesc
                "\"INSPID\" TEXT," + // 6: inspid
                "\"INSPTABLE\" TEXT," + // 7: insptable
                "\"OISUPER\" TEXT," + // 8: oisuper
                "\"INSPLOC\" TEXT," + // 9: insploc
                "\"CREATE_BY\" TEXT," + // 10: createBy
                "\"UPDATE_BY\" TEXT," + // 11: updateBy
                "\"INSPSTATUS\" TEXT," + // 12: inspstatus
                "\"IMAGE\" TEXT," + // 13: image
                "\"LOACAL_PATH\" TEXT," + // 14: loacalPath
                "\"STATUS\" TEXT," + // 15: status
                "\"INSPSTART\" TEXT);"); // 16: inspstart
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGULATE_RESULT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegulateResultBean entity) {
        stmt.clearBindings();
 
        Long beanId = entity.getBeanId();
        if (beanId != null) {
            stmt.bindLong(1, beanId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String itemid = entity.getItemid();
        if (itemid != null) {
            stmt.bindString(3, itemid);
        }
 
        String itemcontent = entity.getItemcontent();
        if (itemcontent != null) {
            stmt.bindString(4, itemcontent);
        }
 
        String inspresult = entity.getInspresult();
        if (inspresult != null) {
            stmt.bindString(5, inspresult);
        }
 
        String inspdesc = entity.getInspdesc();
        if (inspdesc != null) {
            stmt.bindString(6, inspdesc);
        }
 
        String inspid = entity.getInspid();
        if (inspid != null) {
            stmt.bindString(7, inspid);
        }
 
        String insptable = entity.getInsptable();
        if (insptable != null) {
            stmt.bindString(8, insptable);
        }
 
        String oisuper = entity.getOisuper();
        if (oisuper != null) {
            stmt.bindString(9, oisuper);
        }
 
        String insploc = entity.getInsploc();
        if (insploc != null) {
            stmt.bindString(10, insploc);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(11, createBy);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(12, updateBy);
        }
 
        String inspstatus = entity.getInspstatus();
        if (inspstatus != null) {
            stmt.bindString(13, inspstatus);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(14, image);
        }
 
        String loacalPath = entity.getLoacalPath();
        if (loacalPath != null) {
            stmt.bindString(15, loacalPath);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
 
        String inspstart = entity.getInspstart();
        if (inspstart != null) {
            stmt.bindString(17, inspstart);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegulateResultBean entity) {
        stmt.clearBindings();
 
        Long beanId = entity.getBeanId();
        if (beanId != null) {
            stmt.bindLong(1, beanId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String itemid = entity.getItemid();
        if (itemid != null) {
            stmt.bindString(3, itemid);
        }
 
        String itemcontent = entity.getItemcontent();
        if (itemcontent != null) {
            stmt.bindString(4, itemcontent);
        }
 
        String inspresult = entity.getInspresult();
        if (inspresult != null) {
            stmt.bindString(5, inspresult);
        }
 
        String inspdesc = entity.getInspdesc();
        if (inspdesc != null) {
            stmt.bindString(6, inspdesc);
        }
 
        String inspid = entity.getInspid();
        if (inspid != null) {
            stmt.bindString(7, inspid);
        }
 
        String insptable = entity.getInsptable();
        if (insptable != null) {
            stmt.bindString(8, insptable);
        }
 
        String oisuper = entity.getOisuper();
        if (oisuper != null) {
            stmt.bindString(9, oisuper);
        }
 
        String insploc = entity.getInsploc();
        if (insploc != null) {
            stmt.bindString(10, insploc);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(11, createBy);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(12, updateBy);
        }
 
        String inspstatus = entity.getInspstatus();
        if (inspstatus != null) {
            stmt.bindString(13, inspstatus);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(14, image);
        }
 
        String loacalPath = entity.getLoacalPath();
        if (loacalPath != null) {
            stmt.bindString(15, loacalPath);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
 
        String inspstart = entity.getInspstart();
        if (inspstart != null) {
            stmt.bindString(17, inspstart);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RegulateResultBean readEntity(Cursor cursor, int offset) {
        RegulateResultBean entity = new RegulateResultBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // beanId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itemcontent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // inspresult
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // inspdesc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // inspid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // insptable
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // oisuper
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // insploc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createBy
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // updateBy
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // inspstatus
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // image
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // loacalPath
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // status
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // inspstart
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegulateResultBean entity, int offset) {
        entity.setBeanId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemcontent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInspresult(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInspdesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInspid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInsptable(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOisuper(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInsploc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateBy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateBy(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setInspstatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImage(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLoacalPath(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInspstart(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RegulateResultBean entity, long rowId) {
        entity.setBeanId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RegulateResultBean entity) {
        if(entity != null) {
            return entity.getBeanId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RegulateResultBean entity) {
        return entity.getBeanId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
