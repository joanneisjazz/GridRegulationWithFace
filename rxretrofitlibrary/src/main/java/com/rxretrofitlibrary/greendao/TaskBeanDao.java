package com.rxretrofitlibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wzgiceman.rxretrofitlibrary.retrofit_rx.entity.TaskBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_BEAN".
*/
public class TaskBeanDao extends AbstractDao<TaskBean, String> {

    public static final String TABLENAME = "TASK_BEAN";

    /**
     * Properties of entity TaskBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property TableId = new Property(4, String.class, "tableId", false, "TABLE_ID");
        public final static Property Regulator1SignPathLocal = new Property(5, String.class, "regulator1SignPathLocal", false, "REGULATOR1_SIGN_PATH_LOCAL");
        public final static Property Regulator2SignPathLocal = new Property(6, String.class, "regulator2SignPathLocal", false, "REGULATOR2_SIGN_PATH_LOCAL");
        public final static Property ObjectSignPath = new Property(7, String.class, "objectSignPath", false, "OBJECT_SIGN_PATH");
        public final static Property Regulator1SignPath = new Property(8, String.class, "regulator1SignPath", false, "REGULATOR1_SIGN_PATH");
        public final static Property Regulator2SignPath = new Property(9, String.class, "regulator2SignPath", false, "REGULATOR2_SIGN_PATH");
        public final static Property Entsign = new Property(10, String.class, "entsign", false, "ENTSIGN");
        public final static Property Supersign = new Property(11, String.class, "supersign", false, "SUPERSIGN");
        public final static Property Entid = new Property(12, String.class, "entid", false, "ENTID");
        public final static Property Entname = new Property(13, String.class, "entname", false, "ENTNAME");
        public final static Property Enttype = new Property(14, String.class, "enttype", false, "ENTTYPE");
        public final static Property Entregion = new Property(15, String.class, "entregion", false, "ENTREGION");
        public final static Property Entcredit = new Property(16, String.class, "entcredit", false, "ENTCREDIT");
        public final static Property Oisuper = new Property(17, String.class, "oisuper", false, "OISUPER");
        public final static Property Insptable = new Property(18, String.class, "insptable", false, "INSPTABLE");
        public final static Property CreateBy = new Property(19, String.class, "createBy", false, "CREATE_BY");
        public final static Property UpdateBy = new Property(20, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property Inspstart = new Property(21, String.class, "inspstart", false, "INSPSTART");
        public final static Property Inspstatus = new Property(22, String.class, "inspstatus", false, "INSPSTATUS");
        public final static Property Inspresult = new Property(23, String.class, "inspresult", false, "INSPRESULT");
        public final static Property Inspdoc = new Property(24, String.class, "inspdoc", false, "INSPDOC");
        public final static Property Insploc = new Property(25, String.class, "insploc", false, "INSPLOC");
        public final static Property Inspopinion = new Property(26, String.class, "inspopinion", false, "INSPOPINION");
        public final static Property State1 = new Property(27, String.class, "state1", false, "STATE1");
        public final static Property State2 = new Property(28, String.class, "state2", false, "STATE2");
        public final static Property State2_1 = new Property(29, String.class, "state2_1", false, "STATE2_1");
        public final static Property State3 = new Property(30, String.class, "state3", false, "STATE3");
        public final static Property State4 = new Property(31, String.class, "state4", false, "STATE4");
        public final static Property State5 = new Property(32, String.class, "state5", false, "STATE5");
        public final static Property State6 = new Property(33, String.class, "state6", false, "STATE6");
        public final static Property DeleteFlag = new Property(34, String.class, "deleteFlag", false, "DELETE_FLAG");
        public final static Property DeleteUploadFlag = new Property(35, String.class, "deleteUploadFlag", false, "DELETE_UPLOAD_FLAG");
        public final static Property CreateDate = new Property(36, String.class, "createDate", false, "CREATE_DATE");
        public final static Property Resultstr = new Property(37, String.class, "resultstr", false, "RESULTSTR");
        public final static Property CreateDateLocal = new Property(38, String.class, "createDateLocal", false, "CREATE_DATE_LOCAL");
        public final static Property RegulatorName = new Property(39, String.class, "regulatorName", false, "REGULATOR_NAME");
    }


    public TaskBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TaskBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TIME\" TEXT," + // 1: time
                "\"USER_ID\" TEXT," + // 2: userId
                "\"STATUS\" TEXT," + // 3: status
                "\"TABLE_ID\" TEXT," + // 4: tableId
                "\"REGULATOR1_SIGN_PATH_LOCAL\" TEXT," + // 5: regulator1SignPathLocal
                "\"REGULATOR2_SIGN_PATH_LOCAL\" TEXT," + // 6: regulator2SignPathLocal
                "\"OBJECT_SIGN_PATH\" TEXT," + // 7: objectSignPath
                "\"REGULATOR1_SIGN_PATH\" TEXT," + // 8: regulator1SignPath
                "\"REGULATOR2_SIGN_PATH\" TEXT," + // 9: regulator2SignPath
                "\"ENTSIGN\" TEXT," + // 10: entsign
                "\"SUPERSIGN\" TEXT," + // 11: supersign
                "\"ENTID\" TEXT," + // 12: entid
                "\"ENTNAME\" TEXT," + // 13: entname
                "\"ENTTYPE\" TEXT," + // 14: enttype
                "\"ENTREGION\" TEXT," + // 15: entregion
                "\"ENTCREDIT\" TEXT," + // 16: entcredit
                "\"OISUPER\" TEXT," + // 17: oisuper
                "\"INSPTABLE\" TEXT," + // 18: insptable
                "\"CREATE_BY\" TEXT," + // 19: createBy
                "\"UPDATE_BY\" TEXT," + // 20: updateBy
                "\"INSPSTART\" TEXT," + // 21: inspstart
                "\"INSPSTATUS\" TEXT," + // 22: inspstatus
                "\"INSPRESULT\" TEXT," + // 23: inspresult
                "\"INSPDOC\" TEXT," + // 24: inspdoc
                "\"INSPLOC\" TEXT," + // 25: insploc
                "\"INSPOPINION\" TEXT," + // 26: inspopinion
                "\"STATE1\" TEXT," + // 27: state1
                "\"STATE2\" TEXT," + // 28: state2
                "\"STATE2_1\" TEXT," + // 29: state2_1
                "\"STATE3\" TEXT," + // 30: state3
                "\"STATE4\" TEXT," + // 31: state4
                "\"STATE5\" TEXT," + // 32: state5
                "\"STATE6\" TEXT," + // 33: state6
                "\"DELETE_FLAG\" TEXT," + // 34: deleteFlag
                "\"DELETE_UPLOAD_FLAG\" TEXT," + // 35: deleteUploadFlag
                "\"CREATE_DATE\" TEXT," + // 36: createDate
                "\"RESULTSTR\" TEXT," + // 37: resultstr
                "\"CREATE_DATE_LOCAL\" TEXT," + // 38: createDateLocal
                "\"REGULATOR_NAME\" TEXT);"); // 39: regulatorName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindString(5, tableId);
        }
 
        String regulator1SignPathLocal = entity.getRegulator1SignPathLocal();
        if (regulator1SignPathLocal != null) {
            stmt.bindString(6, regulator1SignPathLocal);
        }
 
        String regulator2SignPathLocal = entity.getRegulator2SignPathLocal();
        if (regulator2SignPathLocal != null) {
            stmt.bindString(7, regulator2SignPathLocal);
        }
 
        String objectSignPath = entity.getObjectSignPath();
        if (objectSignPath != null) {
            stmt.bindString(8, objectSignPath);
        }
 
        String regulator1SignPath = entity.getRegulator1SignPath();
        if (regulator1SignPath != null) {
            stmt.bindString(9, regulator1SignPath);
        }
 
        String regulator2SignPath = entity.getRegulator2SignPath();
        if (regulator2SignPath != null) {
            stmt.bindString(10, regulator2SignPath);
        }
 
        String entsign = entity.getEntsign();
        if (entsign != null) {
            stmt.bindString(11, entsign);
        }
 
        String supersign = entity.getSupersign();
        if (supersign != null) {
            stmt.bindString(12, supersign);
        }
 
        String entid = entity.getEntid();
        if (entid != null) {
            stmt.bindString(13, entid);
        }
 
        String entname = entity.getEntname();
        if (entname != null) {
            stmt.bindString(14, entname);
        }
 
        String enttype = entity.getEnttype();
        if (enttype != null) {
            stmt.bindString(15, enttype);
        }
 
        String entregion = entity.getEntregion();
        if (entregion != null) {
            stmt.bindString(16, entregion);
        }
 
        String entcredit = entity.getEntcredit();
        if (entcredit != null) {
            stmt.bindString(17, entcredit);
        }
 
        String oisuper = entity.getOisuper();
        if (oisuper != null) {
            stmt.bindString(18, oisuper);
        }
 
        String insptable = entity.getInsptable();
        if (insptable != null) {
            stmt.bindString(19, insptable);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(20, createBy);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(21, updateBy);
        }
 
        String inspstart = entity.getInspstart();
        if (inspstart != null) {
            stmt.bindString(22, inspstart);
        }
 
        String inspstatus = entity.getInspstatus();
        if (inspstatus != null) {
            stmt.bindString(23, inspstatus);
        }
 
        String inspresult = entity.getInspresult();
        if (inspresult != null) {
            stmt.bindString(24, inspresult);
        }
 
        String inspdoc = entity.getInspdoc();
        if (inspdoc != null) {
            stmt.bindString(25, inspdoc);
        }
 
        String insploc = entity.getInsploc();
        if (insploc != null) {
            stmt.bindString(26, insploc);
        }
 
        String inspopinion = entity.getInspopinion();
        if (inspopinion != null) {
            stmt.bindString(27, inspopinion);
        }
 
        String state1 = entity.getState1();
        if (state1 != null) {
            stmt.bindString(28, state1);
        }
 
        String state2 = entity.getState2();
        if (state2 != null) {
            stmt.bindString(29, state2);
        }
 
        String state2_1 = entity.getState2_1();
        if (state2_1 != null) {
            stmt.bindString(30, state2_1);
        }
 
        String state3 = entity.getState3();
        if (state3 != null) {
            stmt.bindString(31, state3);
        }
 
        String state4 = entity.getState4();
        if (state4 != null) {
            stmt.bindString(32, state4);
        }
 
        String state5 = entity.getState5();
        if (state5 != null) {
            stmt.bindString(33, state5);
        }
 
        String state6 = entity.getState6();
        if (state6 != null) {
            stmt.bindString(34, state6);
        }
 
        String deleteFlag = entity.getDeleteFlag();
        if (deleteFlag != null) {
            stmt.bindString(35, deleteFlag);
        }
 
        String deleteUploadFlag = entity.getDeleteUploadFlag();
        if (deleteUploadFlag != null) {
            stmt.bindString(36, deleteUploadFlag);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(37, createDate);
        }
 
        String resultstr = entity.getResultstr();
        if (resultstr != null) {
            stmt.bindString(38, resultstr);
        }
 
        String createDateLocal = entity.getCreateDateLocal();
        if (createDateLocal != null) {
            stmt.bindString(39, createDateLocal);
        }
 
        String regulatorName = entity.getRegulatorName();
        if (regulatorName != null) {
            stmt.bindString(40, regulatorName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindString(5, tableId);
        }
 
        String regulator1SignPathLocal = entity.getRegulator1SignPathLocal();
        if (regulator1SignPathLocal != null) {
            stmt.bindString(6, regulator1SignPathLocal);
        }
 
        String regulator2SignPathLocal = entity.getRegulator2SignPathLocal();
        if (regulator2SignPathLocal != null) {
            stmt.bindString(7, regulator2SignPathLocal);
        }
 
        String objectSignPath = entity.getObjectSignPath();
        if (objectSignPath != null) {
            stmt.bindString(8, objectSignPath);
        }
 
        String regulator1SignPath = entity.getRegulator1SignPath();
        if (regulator1SignPath != null) {
            stmt.bindString(9, regulator1SignPath);
        }
 
        String regulator2SignPath = entity.getRegulator2SignPath();
        if (regulator2SignPath != null) {
            stmt.bindString(10, regulator2SignPath);
        }
 
        String entsign = entity.getEntsign();
        if (entsign != null) {
            stmt.bindString(11, entsign);
        }
 
        String supersign = entity.getSupersign();
        if (supersign != null) {
            stmt.bindString(12, supersign);
        }
 
        String entid = entity.getEntid();
        if (entid != null) {
            stmt.bindString(13, entid);
        }
 
        String entname = entity.getEntname();
        if (entname != null) {
            stmt.bindString(14, entname);
        }
 
        String enttype = entity.getEnttype();
        if (enttype != null) {
            stmt.bindString(15, enttype);
        }
 
        String entregion = entity.getEntregion();
        if (entregion != null) {
            stmt.bindString(16, entregion);
        }
 
        String entcredit = entity.getEntcredit();
        if (entcredit != null) {
            stmt.bindString(17, entcredit);
        }
 
        String oisuper = entity.getOisuper();
        if (oisuper != null) {
            stmt.bindString(18, oisuper);
        }
 
        String insptable = entity.getInsptable();
        if (insptable != null) {
            stmt.bindString(19, insptable);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(20, createBy);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(21, updateBy);
        }
 
        String inspstart = entity.getInspstart();
        if (inspstart != null) {
            stmt.bindString(22, inspstart);
        }
 
        String inspstatus = entity.getInspstatus();
        if (inspstatus != null) {
            stmt.bindString(23, inspstatus);
        }
 
        String inspresult = entity.getInspresult();
        if (inspresult != null) {
            stmt.bindString(24, inspresult);
        }
 
        String inspdoc = entity.getInspdoc();
        if (inspdoc != null) {
            stmt.bindString(25, inspdoc);
        }
 
        String insploc = entity.getInsploc();
        if (insploc != null) {
            stmt.bindString(26, insploc);
        }
 
        String inspopinion = entity.getInspopinion();
        if (inspopinion != null) {
            stmt.bindString(27, inspopinion);
        }
 
        String state1 = entity.getState1();
        if (state1 != null) {
            stmt.bindString(28, state1);
        }
 
        String state2 = entity.getState2();
        if (state2 != null) {
            stmt.bindString(29, state2);
        }
 
        String state2_1 = entity.getState2_1();
        if (state2_1 != null) {
            stmt.bindString(30, state2_1);
        }
 
        String state3 = entity.getState3();
        if (state3 != null) {
            stmt.bindString(31, state3);
        }
 
        String state4 = entity.getState4();
        if (state4 != null) {
            stmt.bindString(32, state4);
        }
 
        String state5 = entity.getState5();
        if (state5 != null) {
            stmt.bindString(33, state5);
        }
 
        String state6 = entity.getState6();
        if (state6 != null) {
            stmt.bindString(34, state6);
        }
 
        String deleteFlag = entity.getDeleteFlag();
        if (deleteFlag != null) {
            stmt.bindString(35, deleteFlag);
        }
 
        String deleteUploadFlag = entity.getDeleteUploadFlag();
        if (deleteUploadFlag != null) {
            stmt.bindString(36, deleteUploadFlag);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(37, createDate);
        }
 
        String resultstr = entity.getResultstr();
        if (resultstr != null) {
            stmt.bindString(38, resultstr);
        }
 
        String createDateLocal = entity.getCreateDateLocal();
        if (createDateLocal != null) {
            stmt.bindString(39, createDateLocal);
        }
 
        String regulatorName = entity.getRegulatorName();
        if (regulatorName != null) {
            stmt.bindString(40, regulatorName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TaskBean readEntity(Cursor cursor, int offset) {
        TaskBean entity = new TaskBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tableId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // regulator1SignPathLocal
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // regulator2SignPathLocal
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // objectSignPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // regulator1SignPath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // regulator2SignPath
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // entsign
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // supersign
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // entid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // entname
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // enttype
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // entregion
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // entcredit
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // oisuper
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // insptable
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // createBy
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // updateBy
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // inspstart
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // inspstatus
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // inspresult
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // inspdoc
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // insploc
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // inspopinion
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // state1
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // state2
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // state2_1
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // state3
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // state4
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // state5
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // state6
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // deleteFlag
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // deleteUploadFlag
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // createDate
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // resultstr
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // createDateLocal
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39) // regulatorName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTableId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegulator1SignPathLocal(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRegulator2SignPathLocal(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setObjectSignPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegulator1SignPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRegulator2SignPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEntsign(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSupersign(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEntid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEntname(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEnttype(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEntregion(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEntcredit(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOisuper(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setInsptable(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreateBy(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUpdateBy(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setInspstart(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setInspstatus(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setInspresult(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setInspdoc(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setInsploc(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setInspopinion(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setState1(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setState2(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setState2_1(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setState3(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setState4(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setState5(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setState6(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setDeleteFlag(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setDeleteUploadFlag(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setCreateDate(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setResultstr(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setCreateDateLocal(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setRegulatorName(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TaskBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(TaskBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
