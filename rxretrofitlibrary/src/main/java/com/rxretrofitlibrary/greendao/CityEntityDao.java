package com.rxretrofitlibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wzgiceman.rxretrofitlibrary.retrofit_rx.entity.CityEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY_ENTITY".
*/
public class CityEntityDao extends AbstractDao<CityEntity, Long> {

    public static final String TABLENAME = "CITY_ENTITY";

    /**
     * Properties of entity CityEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Pcode = new Property(2, String.class, "pcode", false, "PCODE");
        public final static Property Sname = new Property(3, String.class, "sname", false, "SNAME");
        public final static Property Jd = new Property(4, String.class, "jd", false, "JD");
        public final static Property Wd = new Property(5, String.class, "wd", false, "WD");
        public final static Property Level = new Property(6, String.class, "level", false, "LEVEL");
        public final static Property Orders = new Property(7, int.class, "orders", false, "ORDERS");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
    }


    public CityEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CityEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"PCODE\" TEXT," + // 2: pcode
                "\"SNAME\" TEXT," + // 3: sname
                "\"JD\" TEXT," + // 4: jd
                "\"WD\" TEXT," + // 5: wd
                "\"LEVEL\" TEXT," + // 6: level
                "\"ORDERS\" INTEGER NOT NULL ," + // 7: orders
                "\"NAME\" TEXT);"); // 8: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CityEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String pcode = entity.getPcode();
        if (pcode != null) {
            stmt.bindString(3, pcode);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(4, sname);
        }
 
        String jd = entity.getJd();
        if (jd != null) {
            stmt.bindString(5, jd);
        }
 
        String wd = entity.getWd();
        if (wd != null) {
            stmt.bindString(6, wd);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(7, level);
        }
        stmt.bindLong(8, entity.getOrders());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CityEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String pcode = entity.getPcode();
        if (pcode != null) {
            stmt.bindString(3, pcode);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(4, sname);
        }
 
        String jd = entity.getJd();
        if (jd != null) {
            stmt.bindString(5, jd);
        }
 
        String wd = entity.getWd();
        if (wd != null) {
            stmt.bindString(6, wd);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(7, level);
        }
        stmt.bindLong(8, entity.getOrders());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CityEntity readEntity(Cursor cursor, int offset) {
        CityEntity entity = new CityEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // jd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // wd
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // level
            cursor.getInt(offset + 7), // orders
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CityEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLevel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrders(cursor.getInt(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CityEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CityEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CityEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
