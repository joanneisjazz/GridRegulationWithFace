package com.rxretrofitlibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wzgiceman.rxretrofitlibrary.retrofit_rx.entity.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BeanId = new Property(0, Long.class, "beanId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property RoName = new Property(3, String.class, "roName", false, "RO_NAME");
        public final static Property Loginname = new Property(4, String.class, "loginname", false, "LOGINNAME");
        public final static Property Salt = new Property(5, String.class, "salt", false, "SALT");
        public final static Property Username = new Property(6, String.class, "username", false, "USERNAME");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property LoginCount = new Property(8, int.class, "loginCount", false, "LOGIN_COUNT");
        public final static Property LoginTheme = new Property(9, String.class, "loginTheme", false, "LOGIN_THEME");
        public final static Property Mobile = new Property(10, String.class, "mobile", false, "MOBILE");
        public final static Property OrgId = new Property(11, String.class, "orgId", false, "ORG_ID");
        public final static Property OrgName = new Property(12, String.class, "orgName", false, "ORG_NAME");
        public final static Property OrgType = new Property(13, String.class, "orgType", false, "ORG_TYPE");
        public final static Property UserExtId = new Property(14, String.class, "userExtId", false, "USER_EXT_ID");
        public final static Property LoginSidebar = new Property(15, boolean.class, "loginSidebar", false, "LOGIN_SIDEBAR");
        public final static Property LoginBoxed = new Property(16, boolean.class, "loginBoxed", false, "LOGIN_BOXED");
        public final static Property LoginScroll = new Property(17, boolean.class, "loginScroll", false, "LOGIN_SCROLL");
        public final static Property LoginPjax = new Property(18, boolean.class, "loginPjax", false, "LOGIN_PJAX");
        public final static Property Unitid = new Property(19, String.class, "unitid", false, "UNITID");
        public final static Property ExpTime = new Property(20, int.class, "expTime", false, "EXP_TIME");
        public final static Property OpBy = new Property(21, String.class, "opBy", false, "OP_BY");
        public final static Property OpAt = new Property(22, int.class, "opAt", false, "OP_AT");
        public final static Property LoginTime = new Property(23, String.class, "loginTime", false, "LOGIN_TIME");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: beanId
                "\"ID\" TEXT," + // 1: id
                "\"PASSWORD\" TEXT," + // 2: password
                "\"RO_NAME\" TEXT," + // 3: roName
                "\"LOGINNAME\" TEXT," + // 4: loginname
                "\"SALT\" TEXT," + // 5: salt
                "\"USERNAME\" TEXT," + // 6: username
                "\"EMAIL\" TEXT," + // 7: email
                "\"LOGIN_COUNT\" INTEGER NOT NULL ," + // 8: loginCount
                "\"LOGIN_THEME\" TEXT," + // 9: loginTheme
                "\"MOBILE\" TEXT," + // 10: mobile
                "\"ORG_ID\" TEXT," + // 11: orgId
                "\"ORG_NAME\" TEXT," + // 12: orgName
                "\"ORG_TYPE\" TEXT," + // 13: orgType
                "\"USER_EXT_ID\" TEXT," + // 14: userExtId
                "\"LOGIN_SIDEBAR\" INTEGER NOT NULL ," + // 15: loginSidebar
                "\"LOGIN_BOXED\" INTEGER NOT NULL ," + // 16: loginBoxed
                "\"LOGIN_SCROLL\" INTEGER NOT NULL ," + // 17: loginScroll
                "\"LOGIN_PJAX\" INTEGER NOT NULL ," + // 18: loginPjax
                "\"UNITID\" TEXT," + // 19: unitid
                "\"EXP_TIME\" INTEGER NOT NULL ," + // 20: expTime
                "\"OP_BY\" TEXT," + // 21: opBy
                "\"OP_AT\" INTEGER NOT NULL ," + // 22: opAt
                "\"LOGIN_TIME\" TEXT);"); // 23: loginTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long beanId = entity.getBeanId();
        if (beanId != null) {
            stmt.bindLong(1, beanId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String roName = entity.getRoName();
        if (roName != null) {
            stmt.bindString(4, roName);
        }
 
        String loginname = entity.getLoginname();
        if (loginname != null) {
            stmt.bindString(5, loginname);
        }
 
        String salt = entity.getSalt();
        if (salt != null) {
            stmt.bindString(6, salt);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
        stmt.bindLong(9, entity.getLoginCount());
 
        String loginTheme = entity.getLoginTheme();
        if (loginTheme != null) {
            stmt.bindString(10, loginTheme);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(11, mobile);
        }
 
        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(12, orgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(13, orgName);
        }
 
        String orgType = entity.getOrgType();
        if (orgType != null) {
            stmt.bindString(14, orgType);
        }
 
        String userExtId = entity.getUserExtId();
        if (userExtId != null) {
            stmt.bindString(15, userExtId);
        }
        stmt.bindLong(16, entity.getLoginSidebar() ? 1L: 0L);
        stmt.bindLong(17, entity.getLoginBoxed() ? 1L: 0L);
        stmt.bindLong(18, entity.getLoginScroll() ? 1L: 0L);
        stmt.bindLong(19, entity.getLoginPjax() ? 1L: 0L);
 
        String unitid = entity.getUnitid();
        if (unitid != null) {
            stmt.bindString(20, unitid);
        }
        stmt.bindLong(21, entity.getExpTime());
 
        String opBy = entity.getOpBy();
        if (opBy != null) {
            stmt.bindString(22, opBy);
        }
        stmt.bindLong(23, entity.getOpAt());
 
        String loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindString(24, loginTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long beanId = entity.getBeanId();
        if (beanId != null) {
            stmt.bindLong(1, beanId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String roName = entity.getRoName();
        if (roName != null) {
            stmt.bindString(4, roName);
        }
 
        String loginname = entity.getLoginname();
        if (loginname != null) {
            stmt.bindString(5, loginname);
        }
 
        String salt = entity.getSalt();
        if (salt != null) {
            stmt.bindString(6, salt);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
        stmt.bindLong(9, entity.getLoginCount());
 
        String loginTheme = entity.getLoginTheme();
        if (loginTheme != null) {
            stmt.bindString(10, loginTheme);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(11, mobile);
        }
 
        String orgId = entity.getOrgId();
        if (orgId != null) {
            stmt.bindString(12, orgId);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(13, orgName);
        }
 
        String orgType = entity.getOrgType();
        if (orgType != null) {
            stmt.bindString(14, orgType);
        }
 
        String userExtId = entity.getUserExtId();
        if (userExtId != null) {
            stmt.bindString(15, userExtId);
        }
        stmt.bindLong(16, entity.getLoginSidebar() ? 1L: 0L);
        stmt.bindLong(17, entity.getLoginBoxed() ? 1L: 0L);
        stmt.bindLong(18, entity.getLoginScroll() ? 1L: 0L);
        stmt.bindLong(19, entity.getLoginPjax() ? 1L: 0L);
 
        String unitid = entity.getUnitid();
        if (unitid != null) {
            stmt.bindString(20, unitid);
        }
        stmt.bindLong(21, entity.getExpTime());
 
        String opBy = entity.getOpBy();
        if (opBy != null) {
            stmt.bindString(22, opBy);
        }
        stmt.bindLong(23, entity.getOpAt());
 
        String loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindString(24, loginTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // beanId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // roName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // loginname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // salt
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // username
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.getInt(offset + 8), // loginCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // loginTheme
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mobile
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // orgId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // orgName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // orgType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userExtId
            cursor.getShort(offset + 15) != 0, // loginSidebar
            cursor.getShort(offset + 16) != 0, // loginBoxed
            cursor.getShort(offset + 17) != 0, // loginScroll
            cursor.getShort(offset + 18) != 0, // loginPjax
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // unitid
            cursor.getInt(offset + 20), // expTime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // opBy
            cursor.getInt(offset + 22), // opAt
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // loginTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setBeanId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLoginname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSalt(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUsername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLoginCount(cursor.getInt(offset + 8));
        entity.setLoginTheme(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMobile(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrgId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrgName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOrgType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserExtId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLoginSidebar(cursor.getShort(offset + 15) != 0);
        entity.setLoginBoxed(cursor.getShort(offset + 16) != 0);
        entity.setLoginScroll(cursor.getShort(offset + 17) != 0);
        entity.setLoginPjax(cursor.getShort(offset + 18) != 0);
        entity.setUnitid(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setExpTime(cursor.getInt(offset + 20));
        entity.setOpBy(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setOpAt(cursor.getInt(offset + 22));
        entity.setLoginTime(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setBeanId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getBeanId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getBeanId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
